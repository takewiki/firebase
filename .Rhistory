library(firebase)
library(shiny)
library(firebase)
ui <- fluidPage(
useFirebase(), # import dependencies,
useFirebaseUI()
)
server <- function(input, output){
f <- FirebaseUI$
new()$ # instantiate
set_providers( # define providers
email = TRUE,
google = TRUE
)$
launch() # launch
}
shinyApp(ui, server)
#'
#' @details Do not share this file with anyone.
#'
#' @return Path to file.
#'
#' @examples \dontrun{firebase_config("xXxxx", "my-project")}
#'
#' @name config
#'
#' @export
create_config <- function(api_key, project_id, auth_domain = NULL, overwrite = FALSE){
.Deprecated("firebase_config", package = "firebase")
if(missing(api_key) || missing(project_id) )
stop("Missing `api_key`, or `project_id`", call. = FALSE)
if(is.null(auth_domain)){
auth_domain <- paste0(project_id, ".firebaseapp.com")
cli::cli_alert_warning(paste("Setting `auth_domain` to", auth_domain))
}
lst <- list(
apiKey = .enc(api_key),
authDomain = .enc(auth_domain),
projectId = .enc(project_id)
)
# check if file exists
exists <- has_config(config_file)
if(exists && overwrite)
cli::cli_alert_warning("Overwriting existing config file.")
if(exists && !overwrite){
cli::cli_alert_danger("Config file already exists, see `overwrite` argument.")
return(invisible())
}
saveRDS(lst, file = config_file)
cli::cli_alert_success("Configuration file created.")
invisible(config_file)
}
#' @rdname config
#' @export
firebase_config <- function(api_key, project_id, auth_domain = NULL, overwrite = FALSE){
if(missing(api_key) || missing(project_id) )
stop("Missing `api_key`, or `project_id`", call. = FALSE)
if(is.null(auth_domain)){
auth_domain <- paste0(project_id, ".firebaseapp.com")
cli::cli_alert_warning(paste("Setting `auth_domain` to", auth_domain))
}
lst <- list(
apiKey = .enc(api_key),
authDomain = .enc(auth_domain),
projectId = .enc(project_id)
)
# check if file exists
exists <- has_config(config_file)
if(exists && overwrite)
cli::cli_alert_warning("Overwriting existing config file.")
if(exists && !overwrite){
cli::cli_alert_danger("Config file already exists, see `overwrite` argument.")
return(invisible())
}
saveRDS(lst, file = config_file)
cli::cli_alert_success("Configuration file created.")
invisible(config_file)
}
#' Config Internal
#'
#' Read and checks config.
#'
#' @param path Path to config file
#'
#' @name read_config
#'
#' @keywords internal
read_config <- function(path){
if(missing(path))
stop("Missing `path`", call. = FALSE)
stopifno_config(path)
config <- readRDS(path)
config <- lapply(config, .dec)
# avoid printing creds
invisible(config)
}
library(shiny)
library(firebase)
ui <- fluidPage(
useFirebase(), # import dependencies,
useFirebaseUI()
)
server <- function(input, output){
f <- FirebaseUI$
new()$ # instantiate
set_providers( # define providers
email = TRUE,
google = TRUE
)$
launch() # launch
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(firebase)
ui <- fluidPage(
useFirebase(),
useFirebaseUI(),
reqSignin(actionButton("signout", "Sign out")),
uiOutput("msg"),
plotOutput("plot")
)
server <- function(input, output){
f <- FirebaseUI$
new("session")$
set_providers(
email = TRUE,
yahoo = TRUE,
google = TRUE,
github = TRUE,
twitter = TRUE,
facebook = TRUE,
microsoft = TRUE
)$
launch()
output$plot <- renderPlot({
f$req_sign_in() # require sign in
plot(cars)
})
output$msg <- renderUI({
f$req_sign_in() # require sign in
user <- f$get_signed_in() # get logged in user info
print(user)
h4("Welcome,", user$response$displayName)
})
observeEvent(input$signout, {
f$sign_out()
})
}
shinyApp(ui, server)
firebase::create_config(api_key = 'AIzaSyAcd_RgDckUZ4utcDbG6hQqSHL6iKZhUMQ',project_id = "dbcc-34654",auth_domain = "dbcc-34654.firebaseapp.com")
firebase::firebase_config(api_key = 'AIzaSyAcd_RgDckUZ4utcDbG6hQqSHL6iKZhUMQ',project_id = "dbcc-34654",auth_domain = "dbcc-34654.firebaseapp.com")
firebase::firebase_config(api_key = 'AIzaSyAcd_RgDckUZ4utcDbG6hQqSHL6iKZhUMQ',project_id = "dbcc-34654",auth_domain = "dbcc-34654.firebaseapp.com")
